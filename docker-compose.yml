version: '3.5'

services:
  postgres:
    container_name: postgres_container
    image: postgres
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'postgres'
      POSTGRES_DB: 'postgres'
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - spring-cloud-network
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - spring-cloud-network
    restart: unless-stopped

  spring-boot-app-1:
    container_name: courier
    build:
      context: ./courier  # Replace with the actual directory where your first Spring Boot app is located
      dockerfile: Dockerfile
    expose:
      - "8080"
    networks:
      - spring-cloud-network
    depends_on:
      - postgres
    restart: unless-stopped

  spring-boot-app-2:
    container_name: route
    build:
      context: ./route  # Replace with the actual directory where your second Spring Boot app is located
      dockerfile: Dockerfile
    expose:
      - "8081"
    networks:
      - spring-cloud-network
    depends_on:
      - postgres
    restart: unless-stopped

  nginx:
    container_name: nginx_reverse_proxy
    image: nginx
    ports:
      - "80:80"  # Expose Nginx on port 80
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf  # Mount your custom Nginx configuration file
    networks:
      - spring-cloud-network
    depends_on:
      - spring-boot-app-1
      - spring-boot-app-2
    restart: unless-stopped

networks:
  spring-cloud-network:
    driver: bridge

volumes:
  postgres:
  pgadmin:
